package sdl

import (
	"bytes"
	"html/template"
	"strings"
)

//nolint:lll
var messageTemplate = `
{{- /* delete empty line */ -}}
# Code generated by kratos proto types. DO NOT EDIT.
# source: {{ .Source }}

{{- if .QueryMethods }}
type {{ .Module }}Query  {
	{{- range .QueryMethods }}
	{{ .Name }}(in: {{ .Request }}!): {{ .Reply }}!
	{{- end }}
}
{{- end }}

{{- if .MutationMethods }}
type {{ .Module }}Mutation  {
	{{- range .MutationMethods }}
	{{ .Name }}(in: {{ .Request }}!): {{ .Reply }}!
	{{- end }}
}
{{- end }}

{{- if .SubscriptionMethods }}
type {{ .Module }}Subscription  {
	{{- range .SubscriptionMethods }}
	{{ .Name }}(in: {{ .Request }}!): {{ .Reply }}!
	{{- end }}
}
{{- end }}

{{- range .InputMessage }}
input {{ .Name }} {
	{{- range .Fields }}
	{{ .Name }}: {{ if .Repeated }}[{{ .Type }}{{ if .Required }}!{{ end }}]!{{ else }}{{ .Type }}{{ if .Required }}!{{ end }}{{ end }}
	{{- end }}
}
{{- end }}

{{- range .OutputMessage }}
type {{ .Name }} {
	{{- range .Fields }}
	{{ .Name }}: {{ if .Repeated }}[{{ .Type }}{{ if .Required }}!{{ end }}]!{{ else }}{{ .Type }}{{ if .Required }}!{{ end }}{{ end }}
	{{- end }}
}
{{- end }}
`

type FieldMode string
type MethodMode string

const (
	input  FieldMode = "input"
	output FieldMode = "output"
)

const (
	query        MethodMode = "query"
	mutation     MethodMode = "mutation"
	subscription MethodMode = "subscription"
)

// Method is a proto method.
type Method struct {
	Name    string
	Request string
	Reply   string
}

type Field struct {
	Name     string
	Type     string
	Repeated bool
	Required bool
}

type Message struct {
	Name   string
	Fields []*Field
}

type Msg struct {
	Source              string
	Module              string
	MutationMethods     []*Method
	QueryMethods        []*Method
	SubscriptionMethods []*Method
	InputMessage        []*Message
	OutputMessage       []*Message
}

func (l *Msg) execute() ([]byte, error) {
	buf := new(bytes.Buffer)
	tmpl, err := template.New("msg").Parse(messageTemplate)
	if err != nil {
		return nil, err
	}
	if err := tmpl.Execute(buf, l); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// addInputMessage adds a input message.
func (l *Msg) addInputMessage(message *Message) {
	l.InputMessage = append(l.InputMessage, message)
}

// addOutputMessage adds a output message.
func (l *Msg) addOutputMessage(message *Message) {
	l.OutputMessage = append(l.OutputMessage, message)
}

// addQueryMethod adds a query method.
func (l *Msg) addQueryMethod(method *Method) {
	l.QueryMethods = append(l.QueryMethods, method)
}

// addMutationMethod adds a mutation method.
func (l *Msg) addMutationMethod(method *Method) {
	l.MutationMethods = append(l.MutationMethods, method)
}

// addSubscriptionMethod adds a subscription method.
func (l *Msg) addSubscriptionMethod(method *Method) {
	l.SubscriptionMethods = append(l.SubscriptionMethods, method)
}

// addField adds a field.
func (m *Message) addField(field *Field) {
	m.Fields = append(m.Fields, field)
}

// addMessage adds a message.
func (l *Msg) addMessage(mode FieldMode, message *Message) {
	switch mode {
	case output:
		l.OutputMessage = append(l.OutputMessage, message)
	case input:
		l.InputMessage = append(l.InputMessage, message)
	default:
		l.OutputMessage = append(l.OutputMessage, message)
	}
}

// addMethod adds a method.
func (l *Msg) addMethod(mode MethodMode, method *Method) {
	switch mode {
	case query:
		l.QueryMethods = append(l.QueryMethods, method)
	case mutation:
		l.MutationMethods = append(l.MutationMethods, method)
	case subscription:
		l.SubscriptionMethods = append(l.SubscriptionMethods, method)
	default:
		l.QueryMethods = append(l.QueryMethods, method)
	}
}

func parseComment(s, tag string) string {
	tagStr := tag + ":"
	if strings.Contains(s, tagStr) {
		ss := strings.Split(s, " ")
		for index, v := range ss {
			if v == tagStr && index+1 < len(ss) {
				res := ss[index+1]
				// 去掉双引号
				res = strings.ReplaceAll(res, "\"", "")
				return res
			}
		}
	}
	return ""
}

// 获取Comment @sdl: "input|output|subscription"
func parseFieldMode(s string) FieldMode {
	return FieldMode(parseComment(s, "@sdl"))
}

// 获取Comment @sdl_type: "query|mutation|subscription"
func parseMethodMode(s string) MethodMode {
	return MethodMode(parseComment(s, "@sdl"))
}

// 首字母大写
func upperFirst(s string) string {
	if len(s) == 0 {
		return s
	}
	return strings.ToUpper(s[:1]) + s[1:]
}

// 类型存在.情况去最后一级
func parseFieldType(s string) string {
	if strings.Contains(s, ".") {
		ss := strings.Split(s, ".")
		return upperFirst(ss[len(ss)-1])
	}
	return upperFirst(s)
}

func parseSdlType(s string) string {
	return parseInlineComment(s, "@sdl_type")
}
